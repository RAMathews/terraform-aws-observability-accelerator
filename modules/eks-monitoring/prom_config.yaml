global:
  scrape_interval: ${global_scrape_interval}
  scrape_timeout: ${global_scrape_timeout}
  external_labels:
    cluster: ${eks_cluster_id}
    region : ${region}
    account_id : ${accountID}
scrape_configs:
  - job_name: 'kubernetes-kubelet'
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
    - role: node
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: kubernetes.default.svc.cluster.local:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/$${1}/proxy/metrics

  - job_name: 'kubelet'
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
    - role: node
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: kubernetes.default.svc.cluster.local:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor

  %{~ if enableAPIserver ~}
  - job_name: 'apiserver'
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
    - role: endpoints
    relabel_configs:
    - source_labels:
        [
         __meta_kubernetes_namespace,
         __meta_kubernetes_service_name,
         __meta_kubernetes_endpoint_port_name,
        ]
      action: keep
      regex: default;kubernetes;https
    metric_relabel_configs:
    - action: keep
      source_labels: [__name__]
    - source_labels: [__name__, le]
      separator: ;
      regex: apiserver_request_duration_seconds_bucket;(0.15|0.2|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2|3|3.5|4|4.5|6|7|8|9|15|25|40|50)
      replacement: $1
      action: drop
  %{~ endif ~}

  - job_name: serviceMonitor/default/kube-prometheus-stack-prometheus-node-exporter/0
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (prometheus-node-exporter);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_jobLabel]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http-metrics
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - default
  - job_name: serviceMonitor/default/kube-prometheus-stack-prometheus/0
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (kube-prometheus-stack-prometheus);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_self_monitor, __meta_kubernetes_service_labelpresent_self_monitor]
      separator: ;
      regex: (true);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http-web
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http-web
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - default
  - job_name: serviceMonitor/default/kube-prometheus-stack-operator/0
    honor_labels: true
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (kube-prometheus-stack-operator);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: https
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: https
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - default
  - job_name: serviceMonitor/default/kube-prometheus-stack-kubelet/2
    honor_labels: true
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    metrics_path: /metrics/probes
    scheme: https
    authorization:
      type: Bearer
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
      separator: ;
      regex: (kubelet);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_k8s_app, __meta_kubernetes_service_labelpresent_k8s_app]
      separator: ;
      regex: (kubelet);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: https-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_k8s_app]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: https-metrics
      action: replace
    - source_labels: [__metrics_path__]
      separator: ;
      regex: (.*)
      target_label: metrics_path
      replacement: $$1
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - kube-system
  - job_name: serviceMonitor/default/kube-prometheus-stack-kubelet/1
    honor_labels: true
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    metrics_path: /metrics/cadvisor
    scheme: https
    authorization:
      type: Bearer
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
      separator: ;
      regex: (kubelet);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_k8s_app, __meta_kubernetes_service_labelpresent_k8s_app]
      separator: ;
      regex: (kubelet);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: https-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_k8s_app]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: https-metrics
      action: replace
    - source_labels: [__metrics_path__]
      separator: ;
      regex: (.*)
      target_label: metrics_path
      replacement: $$1
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - kube-system
  - job_name: serviceMonitor/default/kube-prometheus-stack-kubelet/0
    honor_labels: true
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: https
    authorization:
      type: Bearer
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
      separator: ;
      regex: (kubelet);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_k8s_app, __meta_kubernetes_service_labelpresent_k8s_app]
      separator: ;
      regex: (kubelet);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: https-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_k8s_app]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: https-metrics
      action: replace
    - source_labels: [__metrics_path__]
      separator: ;
      regex: (.*)
      target_label: metrics_path
      replacement: $$1
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - kube-system
  - job_name: serviceMonitor/default/kube-prometheus-stack-kube-state-metrics/0
    honor_labels: true
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_instance, __meta_kubernetes_service_labelpresent_app_kubernetes_io_instance]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
      separator: ;
      regex: (kube-state-metrics);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - default
  - job_name: serviceMonitor/default/kube-prometheus-stack-kube-scheduler/0
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    authorization:
      type: Bearer
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (kube-prometheus-stack-kube-scheduler);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_jobLabel]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http-metrics
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - kube-system
  - job_name: 'kube-proxy'
    honor_labels: true
    kubernetes_sd_configs:
    - role: pod
    relabel_configs:
    - action: keep
      source_labels:
      - __meta_kubernetes_namespace
      - __meta_kubernetes_pod_name
      separator: '/'
      regex: 'kube-system/kube-proxy.+'
    - source_labels:
      - __address__
      action: replace
      target_label: __address__
      regex: (.+?)(\\:\\d+)?
      replacement: $$1:10249
  - job_name: serviceMonitor/default/kube-prometheus-stack-kube-controller-manager/0
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    authorization:
      type: Bearer
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (kube-prometheus-stack-kube-controller-manager);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_jobLabel]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http-metrics
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - kube-system
  - job_name: serviceMonitor/default/kube-prometheus-stack-coredns/0
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    authorization:
      type: Bearer
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (kube-prometheus-stack-coredns);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http-metrics
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_jobLabel]
      separator: ;
      regex: (.+)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http-metrics
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        namespaces:
          own_namespace: false
          names:
          - kube-system
  - job_name: serviceMonitor/default/kube-prometheus-stack-alertmanager/0
    honor_timestamps: true
    scrape_interval: ${global_scrape_interval}
    scrape_timeout: ${global_scrape_timeout}
    scheme: http
    follow_redirects: true
    enable_http2: true
    relabel_configs:
    - source_labels: [job]
      separator: ;
      regex: (.*)
      target_label: __tmp_prometheus_job_name
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_label_app, __meta_kubernetes_service_labelpresent_app]
      separator: ;
      regex: (kube-prometheus-stack-alertmanager);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_release, __meta_kubernetes_service_labelpresent_release]
      separator: ;
      regex: (kube-prometheus-stack);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_service_label_self_monitor, __meta_kubernetes_service_labelpresent_self_monitor]
      separator: ;
      regex: (true);true
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      separator: ;
      regex: http-web
      replacement: $$1
      action: keep
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Node;(.*)
      target_label: node
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
      separator: ;
      regex: Pod;(.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_namespace]
      separator: ;
      regex: (.*)
      target_label: namespace
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: service
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_name]
      separator: ;
      regex: (.*)
      target_label: pod
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_pod_container_name]
      separator: ;
      regex: (.*)
      target_label: container
      replacement: $$1
      action: replace
    - source_labels: [__meta_kubernetes_service_name]
      separator: ;
      regex: (.*)
      target_label: job
      replacement: $$1
      action: replace
    - separator: ;
      regex: (.*)
      target_label: endpoint
      replacement: http-web
      action: replace
    - source_labels: [__address__]
      separator: ;
      regex: (.*)
      modulus: 1
      target_label: __tmp_hash
      replacement: $$1
      action: hashmod
    - source_labels: [__tmp_hash]
      separator: ;
      regex: "0"
      replacement: $$1
      action: keep
    kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true
        enable_http2: true
        namespaces:
          own_namespace: false
          names:
          - default

  - job_name: 'kube-state-metrics'
    static_configs:
      - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
  - job_name: 'node-exporter'
    kubernetes_sd_configs:
      - role: endpoints
    relabel_configs:
    - source_labels:
      - __address__
      action: keep
      regex: '.*:9100$'
    - action: replace
      source_labels:
      - __meta_kubernetes_endpoint_node_name
      target_label: nodename

